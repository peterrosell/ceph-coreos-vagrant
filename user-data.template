#cloud-config

coreos:
  etcd2:
    # generated a new token for the unique cluster with https://discovery.etcd.io/new?size=3
    # discovery: https://discovery.etcd.io/TO_BE_REPLACED_WITH_VALID_ID
    initial-advertise-peer-urls: http://$public_ipv4:2380
    advertise-client-urls: http://$public_ipv4:2379
    # listen on both the official ports
    listen-peer-urls: http://0.0.0.0:2380
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
#  fleet:
#    public-ip: $public_ipv4
#    etcd-servers: http://127.0.0.1:2379
#    metadata: storage=__ID__,type=storage

  units:
#    - name: settimezone.service
#      command: start
#      content: |
#        [Unit]
#        Description=Set the timezone
#        [Service]
#        ExecStart=/usr/bin/timedatectl set-timezone Europe/Stockholm
#        RemainAfterExit=yes
#        Type=oneshot

    - name: prepare-disks.service
      command: start
      content: |
        [Unit]
        Description=Partition and format storage disks
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/tools/prepare_disks.sh perform

    - name: mount-storage-disks.service
      command: start
      content: |
        [Unit]
        Description=Mount storage disks
        Requires=prepare-disks.service
        After=prepare-disks.service
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/tools/mount_storage_disks.sh

    - name: etcd2.service
      command: start

    - name: fleet.service
      command: start

    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker Socket for the API

        [Socket]
        ListenStream=2375
        Service=docker.service
        BindIPv6Only=both

        [Install]
        WantedBy=sockets.target

write_files:
  - path: /etc/systemd/system/docker.service.d/50-insecure-registry.conf
    content: |
        [Service]
        Environment='DOCKER_OPTS=--insecure-registry="__MY_DOCKER_REGISTRY__"'

  - path: /etc/fleet/fleet.conf
    permissions: 0644
    owner: root
    content: |
      metadata="type=storage,storage=__ID__"

  - path: /tools/prepare_disks.sh
    permissions: 0755
    owner: root
    content: |
      #!/bin/bash

      DEBUG=true
      set -e

      if [ "$1" == "perform" ]; then
        PERFORM=true
        echo "Prepare disks will perform a real disk format!"
      else
        PERFORM=""
        echo "Prepare disks will do a DRY RUN."
      fi

      debug() {
        if [ "$DEBUG" != "" ]; then
          echo $*
        fi
      }

      run_and_log() {
        echo $*
        if [ "$PERFORM" != "" ]; then
          $*
        fi
      }

      containsDisk () {
        local e
        RESULT="false"
        for e in "${@:2}"; do [[ "${e,,}" == "${1,,}" ]] && RESULT="true"; done
        echo "$RESULT"
      }

      getDiskUUID() {
        echo $(fdisk -l $1 | cut -f3 -d'/' | cut -f1 -d',' | grep 'Disk identifier:' | sed 's/.*: \(.*\)/\1/')
      }

      getPartUUID() {
        PARTITION=$1
        if [ "$PERFORM" != "" ]; then
        echo $(lsblk `readlink -f $PARTITION` -o PARTUUID --noheadings)
 #          echo $(blkid $1 | gawk 'match($0,/PARTUUID=\"(.*?)\"/, ary) {print ary[1]}')
        else
          echo "DUMMY-UUID"
        fi
      }

      getAvailableDiskSpaceInSectors() {
        if [ "$PERFORM" != "" ]; then
          echo $(parted -s -m $1 unit s print free | tail -n 1 | grep 'free;' | sort -t : -k 4n -k 2n | awk -F':' '{print $2 " " $3}')
        else
          echo "start-sector end-sector"
        fi
      }

      getAllDisks() {
        echo $(ls /dev/disk/by-id/ata-* | grep -v "\-part")
      }

      ALL_DISKS=$(getAllDisks)
      debug "All disks:"$ALL_DISKS

      if [ -e /etc/prepared_disks.conf ]; then
        set +e
        IFS=$'\n' read -d '' -r -a PREPARED_DISKS < /etc/prepared_disks.conf
        set -e
      else
        PREPARED_DISKS=()
      fi
      debug "Prepared disks: ${PREPARED_DISKS[@]}"


      CLEAN_DISKS=""
      for DISK in $ALL_DISKS
      do
        DISK_LETTERED=$(readlink -f $DISK)
        debug "Disk: $DISK mapped to $DISK_LETTERED"
        DISK_UUID=$(getDiskUUID $DISK_LETTERED)
        debug "Disk uuid: $DISK_UUID"
        if [ "$(containsDisk "$DISK_UUID" "${PREPARED_DISKS[@]}")" == "true" ]; then
          echo "Already prepared disk $DISK. Skipping it."
        else
          set +e
          PARTITIONS=$(ls ${DISK_LETTERED}? 2>/dev/null)
          set -e
          debug "$DISK has parts: $PARTITIONS"
          if [ "$PARTITIONS" == "" ]; then
            CLEAN_DISKS="$CLEAN_DISKS $DISK"
          else
            echo "$DISK already has partitions. Skipping it."
          fi
        fi
      done

      debug "Clean disks:"$CLEAN_DISKS

      DISK_COUNTER=${#PREPARED_DISKS[@]}
      for DISK in $CLEAN_DISKS
      do
        DISK_COUNTER=$((DISK_COUNTER+1))
        DISK_ID="disk_$DISK_COUNTER"
        DISK_LETTERED=$(readlink -f $DISK)
        # Init disk with GTP
        run_and_log parted -s $DISK_LETTERED mklabel gpt
        sleep 1

        # Create journal disk area
        run_and_log parted -s -a optimal $DISK_LETTERED unit GB mkpart primary 0 5
        sleep 1
        run_and_log mkdir -p /disk_journal

        JOURNAL_DISK_UUID=$(getPartUUID ${DISK_LETTERED}1)
        run_and_log ln -s /dev/disk/by-partuuid/$JOURNAL_DISK_UUID /disk_journal/$DISK_ID

        # Allocate other disk space to one storage partition

        AVAILABLE_DISK_SPACE=$(getAvailableDiskSpaceInSectors $DISK)
        sleep 1
        run_and_log parted -s -a optimal $DISK_LETTERED unit s mkpart primary $AVAILABLE_DISK_SPACE
        sleep 5
        run_and_log mkfs.xfs -f -L stor-$DISK_ID ${DISK_LETTERED}2
        sleep 1
        DISK_UUID=$(getDiskUUID $DISK_LETTERED)
        echo "Marking disk with id $DISK_UUID as prepared."
        if [ "$PERFORM" != "" ]; then
          echo "$DISK_UUID" >> /etc/prepared_disks.conf
        fi
      done

  - path: /tools/mount_storage_disks.sh
    permissions: 0755
    owner: root
    content: |
      #!/bin/bash

      set -e

      appendToMetaData() {
        DISK_NAME=$1
        echo "Adding $DISK_NAME to metadata."
        sed -i "s/\"$/,$DISK_NAME=true\"/" /etc/fleet/fleet.conf
      }

      storageLabelToDiskId() {
        STORAGE_LABEL=$1
        A=`echo "$(basename ${DISK})"`
        echo ${A:5}
      }

      STORAGE_DISKS=$(ls /dev/disk/by-label/stor-*)

      for DISK in $STORAGE_DISKS
      do
        DISK_ID="$(storageLabelToDiskId $DISK)"
        DISK_DEST="/disks/$DISK_ID"
        if mount|grep $DISK_DEST; then
          echo "$DISK_DEST is already mounted. Skipping it."
        else
          mkdir -p $DISK_DEST
          echo "Mounting $DISK to $DISK_DEST"
          mount $DISK $DISK_DEST
          appendToMetaData ${DISK_ID}
        fi
      done
